============================
Record patterns
============================

let a b { c; d } = d

---

(compilation_unit
  (value_definition (let_binding
    (identifier)
    (identifier)
    (record_pattern (identifier) (identifier)) (identifier))))

============================
Type annotation patterns
============================

let a (b: C) (d: E) = f

---

(compilation_unit
  (value_definition (let_binding
    (identifier)
    (type_pattern (identifier) (type_identifier))
    (type_pattern (identifier) (type_identifier))
    (identifier))))

============================
Tuple patterns
============================

let a, b = c
let (d, e, f) = g

---

(compilation_unit
  (value_definition
    (let_binding
      (tuple_pattern (identifier) (identifier))
      (identifier)))
  (value_definition
    (let_binding
      (parenthesized_pattern (tuple_pattern (identifier) (tuple_pattern (identifier) (identifier))))
      (identifier))))
